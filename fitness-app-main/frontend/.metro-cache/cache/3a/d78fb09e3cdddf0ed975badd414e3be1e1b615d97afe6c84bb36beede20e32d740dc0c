{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ClipboardPasteButton","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":62,"index":129}}],"key":"LUcIX+CIhB4XU+2a8Ub9n3L2I8w=","exportNames":["*"],"imports":1}},{"name":"./ExpoClipboard","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":130},"end":{"line":3,"column":44,"index":174}}],"key":"64y7yRjbBRJxCbEo7THAGLu8m4I=","exportNames":["*"],"imports":1}},{"name":"./Clipboard.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":216,"column":0,"index":7899},"end":{"line":216,"column":34,"index":7933}}],"key":"meqRnb9IzYBTuycFxx1YZMmO78c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getStringAsync = getStringAsync;\n  exports.setStringAsync = setStringAsync;\n  exports.setString = setString;\n  exports.hasStringAsync = hasStringAsync;\n  exports.getUrlAsync = getUrlAsync;\n  exports.setUrlAsync = setUrlAsync;\n  exports.hasUrlAsync = hasUrlAsync;\n  exports.getImageAsync = getImageAsync;\n  exports.setImageAsync = setImageAsync;\n  exports.hasImageAsync = hasImageAsync;\n  exports.addClipboardListener = addClipboardListener;\n  exports.removeClipboardListener = removeClipboardListener;\n  Object.defineProperty(exports, \"isPasteButtonAvailable\", {\n    enumerable: true,\n    get: function () {\n      return isPasteButtonAvailable;\n    }\n  });\n  Object.defineProperty(exports, \"ClipboardPasteButton\", {\n    enumerable: true,\n    get: function () {\n      return _ClipboardPasteButton.ClipboardPasteButton;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ClipboardPasteButton = require(_dependencyMap[2], \"./ClipboardPasteButton\");\n  var _ExpoClipboard = require(_dependencyMap[3], \"./ExpoClipboard\");\n  var ExpoClipboard = _interopDefault(_ExpoClipboard);\n  var _ClipboardTypes = require(_dependencyMap[4], \"./Clipboard.types\");\n  Object.keys(_ClipboardTypes).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _ClipboardTypes[k];\n        }\n      });\n    }\n  });\n  var onClipboardEventName = 'onClipboardChanged';\n  /**\n   * Gets the content of the user's clipboard. Calling this method on web will prompt\n   * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options Options for the clipboard content to be retrieved.\n   * @returns A promise that resolves to the content of the clipboard.\n   */\n  function getStringAsync() {\n    return _getStringAsync.apply(this, arguments);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   *\n   * @param text The string to save to the clipboard.\n   * @param options Options for the clipboard content to be set.\n   * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n   * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n   */\n  function _getStringAsync() {\n    _getStringAsync = (0, _asyncToGenerator.default)(function* () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!ExpoClipboard.default.getStringAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getStringAsync');\n      }\n      return yield ExpoClipboard.default.getStringAsync(options);\n    });\n    return _getStringAsync.apply(this, arguments);\n  }\n  function setStringAsync(_x) {\n    return _setStringAsync.apply(this, arguments);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n   *\n   * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n   * the user's clipboard. On iOS and Android, nothing is returned.\n   */\n  function _setStringAsync() {\n    _setStringAsync = (0, _asyncToGenerator.default)(function* (text) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!ExpoClipboard.default.setStringAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setStringAsync');\n      }\n      return ExpoClipboard.default.setStringAsync(text, options);\n    });\n    return _setStringAsync.apply(this, arguments);\n  }\n  function setString(text) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      // on web, we need to return legacy method,\n      // because of different return type\n      return ExpoClipboard.default.setString(text);\n    } else {\n      setStringAsync(text);\n    }\n  }\n  /**\n   * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n   */\n  function hasStringAsync() {\n    if (!ExpoClipboard.default.hasStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasStringAsync');\n    }\n    return ExpoClipboard.default.hasStringAsync();\n  }\n  /**\n   * Gets the URL from the user's clipboard.\n   *\n   * @returns A promise that fulfills to the URL in the clipboard.\n   * @platform ios\n   */\n  function getUrlAsync() {\n    return _getUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Sets a URL in the user's clipboard.\n   *\n   * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n   * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n   * clipboard contains a URL and behave accordingly.\n   *\n   * @param url The URL to save to the clipboard.\n   * @platform ios\n   */\n  function _getUrlAsync() {\n    _getUrlAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoClipboard.default.getUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getUrlAsync');\n      }\n      return yield ExpoClipboard.default.getUrlAsync();\n    });\n    return _getUrlAsync.apply(this, arguments);\n  }\n  function setUrlAsync(_x2) {\n    return _setUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Returns whether the clipboard has a URL content.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n   * @platform ios\n   */\n  function _setUrlAsync() {\n    _setUrlAsync = (0, _asyncToGenerator.default)(function* (url) {\n      if (!ExpoClipboard.default.setUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setUrlAsync');\n      }\n      return ExpoClipboard.default.setUrlAsync(url);\n    });\n    return _setUrlAsync.apply(this, arguments);\n  }\n  function hasUrlAsync() {\n    return _hasUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Gets the image from the user's clipboard and returns it in the specified\n   * format. Calling this method on web will prompt the user to grant your app\n   * permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options A `GetImageOptions` object to specify the desired format of the image.\n   * @returns If there was an image in the clipboard, the promise resolves to\n   * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n   * Otherwise, it resolves to `null`.\n   *\n   * @example\n   * ```tsx\n   * const img = await Clipboard.getImageAsync({ format: 'png' });\n   * // ...\n   * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n   * ```\n   */\n  function _hasUrlAsync() {\n    _hasUrlAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoClipboard.default.hasUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasUrlAsync');\n      }\n      return yield ExpoClipboard.default.hasUrlAsync();\n    });\n    return _hasUrlAsync.apply(this, arguments);\n  }\n  function getImageAsync(_x3) {\n    return _getImageAsync.apply(this, arguments);\n  }\n  /**\n   * Sets an image in the user's clipboard.\n   *\n   * @param base64Image Image encoded as a base64 string, without MIME type.\n   *\n   * @example\n   * ```tsx\n   * const result = await ImagePicker.launchImageLibraryAsync({\n   *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n   *   base64: true,\n   * });\n   * await Clipboard.setImageAsync(result.base64);\n   * ```\n   */\n  function _getImageAsync() {\n    _getImageAsync = (0, _asyncToGenerator.default)(function* (options) {\n      if (!ExpoClipboard.default.getImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getImageAsync');\n      }\n      return yield ExpoClipboard.default.getImageAsync(options);\n    });\n    return _getImageAsync.apply(this, arguments);\n  }\n  function setImageAsync(_x4) {\n    return _setImageAsync.apply(this, arguments);\n  }\n  /**\n   * Returns whether the clipboard has an image content.\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n   */\n  function _setImageAsync() {\n    _setImageAsync = (0, _asyncToGenerator.default)(function* (base64Image) {\n      if (!ExpoClipboard.default.setImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setImageAsync');\n      }\n      return ExpoClipboard.default.setImageAsync(base64Image);\n    });\n    return _setImageAsync.apply(this, arguments);\n  }\n  function hasImageAsync() {\n    return _hasImageAsync.apply(this, arguments);\n  }\n  /**\n   * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n   * is a no-op on Web.\n   *\n   * @param listener Callback to execute when listener is triggered. The callback is provided a\n   * single argument that is an object containing information about clipboard contents.\n   *\n   * @example\n   * ```typescript\n   * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n   *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n   *     Clipboard.getStringAsync().then(content => {\n   *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n   *     });\n   *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n   *     alert('Yay! Clipboard contains an image');\n   *   }\n   * });\n   * ```\n   */\n  function _hasImageAsync() {\n    _hasImageAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoClipboard.default.hasImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasImageAsync');\n      }\n      return ExpoClipboard.default.hasImageAsync();\n    });\n    return _hasImageAsync.apply(this, arguments);\n  }\n  function addClipboardListener(listener) {\n    // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n    var listenerWrapper = event => {\n      var wrappedEvent = {\n        ...event,\n        get content() {\n          console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");\n          return '';\n        }\n      };\n      listener(wrappedEvent);\n    };\n    return ExpoClipboard.default.addListener(onClipboardEventName, listenerWrapper);\n  }\n  /**\n   * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n   *\n   * @param subscription The subscription to remove (created by addClipboardListener).\n   *\n   * @example\n   * ```typescript\n   * const subscription = addClipboardListener(() => {\n   *   alert('Copy pasta!');\n   * });\n   * removeClipboardListener(subscription);\n   * ```\n   */\n  function removeClipboardListener(subscription) {\n    subscription.remove();\n  }\n  /**\n   * Property that determines if the `ClipboardPasteButton` is available.\n   *\n   * This requires the users device to be using at least iOS 16.\n   *\n   * `true` if the component is available, and `false` otherwise.\n   */\n  var isPasteButtonAvailable = _expoModulesCore.Platform.OS === 'ios' ? ExpoClipboard.default.isPasteButtonAvailable : false;\n});","lineCount":314,"map":[[12,2,12,0,"exports"],[12,9,12,0],[12,10,12,0,"getStringAsync"],[12,24,12,0],[12,27,12,0,"getStringAsync"],[12,41,12,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"setStringAsync"],[13,24,26,0],[13,27,26,0,"setStringAsync"],[13,41,26,0],[14,2,39,0,"exports"],[14,9,39,0],[14,10,39,0,"setString"],[14,19,39,0],[14,22,39,0,"setString"],[14,31,39,0],[15,2,56,0,"exports"],[15,9,56,0],[15,10,56,0,"hasStringAsync"],[15,24,56,0],[15,27,56,0,"hasStringAsync"],[15,41,56,0],[16,2,68,0,"exports"],[16,9,68,0],[16,10,68,0,"getUrlAsync"],[16,21,68,0],[16,24,68,0,"getUrlAsync"],[16,35,68,0],[17,2,84,0,"exports"],[17,9,84,0],[17,10,84,0,"setUrlAsync"],[17,21,84,0],[17,24,84,0,"setUrlAsync"],[17,35,84,0],[18,2,96,0,"exports"],[18,9,96,0],[18,10,96,0,"hasUrlAsync"],[18,21,96,0],[18,24,96,0,"hasUrlAsync"],[18,35,96,0],[19,2,119,0,"exports"],[19,9,119,0],[19,10,119,0,"getImageAsync"],[19,23,119,0],[19,26,119,0,"getImageAsync"],[19,39,119,0],[20,2,139,0,"exports"],[20,9,139,0],[20,10,139,0,"setImageAsync"],[20,23,139,0],[20,26,139,0,"setImageAsync"],[20,39,139,0],[21,2,152,0,"exports"],[21,9,152,0],[21,10,152,0,"hasImageAsync"],[21,23,152,0],[21,26,152,0,"hasImageAsync"],[21,39,152,0],[22,2,178,0,"exports"],[22,9,178,0],[22,10,178,0,"addClipboardListener"],[22,30,178,0],[22,33,178,0,"addClipboardListener"],[22,53,178,0],[23,2,205,0,"exports"],[23,9,205,0],[23,10,205,0,"removeClipboardListener"],[23,33,205,0],[23,36,205,0,"removeClipboardListener"],[23,59,205,0],[24,2,215,0,"Object"],[24,8,215,0],[24,9,215,0,"defineProperty"],[24,23,215,0],[24,24,215,0,"exports"],[24,31,215,0],[25,4,215,0,"enumerable"],[25,14,215,0],[26,4,215,0,"get"],[26,7,215,0],[26,18,215,0,"get"],[26,19,215,0],[27,6,215,0],[27,13,215,0,"isPasteButtonAvailable"],[27,35,215,0],[28,4,215,0],[29,2,215,0],[30,2,217,0,"Object"],[30,8,217,0],[30,9,217,0,"defineProperty"],[30,23,217,0],[30,24,217,0,"exports"],[30,31,217,0],[31,4,217,0,"enumerable"],[31,14,217,0],[32,4,217,0,"get"],[32,7,217,0],[32,18,217,0,"get"],[32,19,217,0],[33,6,217,0],[33,13,217,9,"ClipboardPasteButton"],[33,34,217,29],[33,35,217,29,"ClipboardPasteButton"],[33,55,217,29],[34,4,217,29],[35,2,217,29],[36,2,217,32],[36,6,217,32,"_babelRuntimeHelpersAsyncToGenerator"],[36,42,217,32],[36,45,217,32,"require"],[36,52,217,32],[36,53,217,32,"_dependencyMap"],[36,67,217,32],[37,2,217,32],[37,6,217,32,"_asyncToGenerator"],[37,23,217,32],[37,26,217,32,"_interopDefault"],[37,41,217,32],[37,42,217,32,"_babelRuntimeHelpersAsyncToGenerator"],[37,78,217,32],[38,2,1,0],[38,6,1,0,"_expoModulesCore"],[38,22,1,0],[38,25,1,0,"require"],[38,32,1,0],[38,33,1,0,"_dependencyMap"],[38,47,1,0],[39,2,2,0],[39,6,2,0,"_ClipboardPasteButton"],[39,27,2,0],[39,30,2,0,"require"],[39,37,2,0],[39,38,2,0,"_dependencyMap"],[39,52,2,0],[40,2,3,0],[40,6,3,0,"_ExpoClipboard"],[40,20,3,0],[40,23,3,0,"require"],[40,30,3,0],[40,31,3,0,"_dependencyMap"],[40,45,3,0],[41,2,3,0],[41,6,3,0,"ExpoClipboard"],[41,19,3,0],[41,22,3,0,"_interopDefault"],[41,37,3,0],[41,38,3,0,"_ExpoClipboard"],[41,52,3,0],[42,2,216,0],[42,6,216,0,"_ClipboardTypes"],[42,21,216,0],[42,24,216,0,"require"],[42,31,216,0],[42,32,216,0,"_dependencyMap"],[42,46,216,0],[43,2,216,0,"Object"],[43,8,216,0],[43,9,216,0,"keys"],[43,13,216,0],[43,14,216,0,"_ClipboardTypes"],[43,29,216,0],[43,31,216,0,"forEach"],[43,38,216,0],[43,49,216,0,"k"],[43,50,216,0],[44,4,216,0],[44,8,216,0,"k"],[44,9,216,0],[44,28,216,0,"Object"],[44,34,216,0],[44,35,216,0,"prototype"],[44,44,216,0],[44,45,216,0,"hasOwnProperty"],[44,59,216,0],[44,60,216,0,"call"],[44,64,216,0],[44,65,216,0,"exports"],[44,72,216,0],[44,74,216,0,"k"],[44,75,216,0],[45,6,216,0,"Object"],[45,12,216,0],[45,13,216,0,"defineProperty"],[45,27,216,0],[45,28,216,0,"exports"],[45,35,216,0],[45,37,216,0,"k"],[45,38,216,0],[46,8,216,0,"enumerable"],[46,18,216,0],[47,8,216,0,"get"],[47,11,216,0],[47,22,216,0,"get"],[47,23,216,0],[48,10,216,0],[48,17,216,0,"_ClipboardTypes"],[48,32,216,0],[48,33,216,0,"k"],[48,34,216,0],[49,8,216,0],[50,6,216,0],[51,4,216,0],[52,2,216,0],[53,2,4,0],[53,6,4,6,"onClipboardEventName"],[53,26,4,26],[53,29,4,29],[53,49,4,49],[54,2,5,0],[55,0,6,0],[56,0,7,0],[57,0,8,0],[58,0,9,0],[59,0,10,0],[60,0,11,0],[61,2,5,0],[61,11,12,22,"getStringAsync"],[61,25,12,36,"getStringAsync"],[61,26,12,36],[62,4,12,36],[62,11,12,36,"_getStringAsync"],[62,26,12,36],[62,27,12,36,"apply"],[62,32,12,36],[62,39,12,36,"arguments"],[62,48,12,36],[63,2,12,36],[64,2,18,0],[65,0,19,0],[66,0,20,0],[67,0,21,0],[68,0,22,0],[69,0,23,0],[70,0,24,0],[71,0,25,0],[72,2,18,0],[72,11,18,0,"_getStringAsync"],[72,27,18,0],[73,4,18,0,"_getStringAsync"],[73,19,18,0],[73,26,18,0,"_asyncToGenerator"],[73,43,18,0],[73,44,18,0,"default"],[73,51,18,0],[73,53,12,7],[73,66,12,51],[74,6,12,51],[74,10,12,37,"options"],[74,17,12,44],[74,20,12,44,"arguments"],[74,29,12,44],[74,30,12,44,"length"],[74,36,12,44],[74,44,12,44,"arguments"],[74,53,12,44],[74,61,12,44,"undefined"],[74,70,12,44],[74,73,12,44,"arguments"],[74,82,12,44],[74,88,12,47],[74,89,12,48],[74,90,12,49],[75,6,13,4],[75,10,13,8],[75,11,13,9,"ExpoClipboard"],[75,24,13,22],[75,25,13,22,"default"],[75,32,13,22],[75,33,13,23,"getStringAsync"],[75,47,13,37],[75,49,13,39],[76,8,14,8],[76,14,14,14],[76,18,14,18,"UnavailabilityError"],[76,34,14,37],[76,35,14,37,"UnavailabilityError"],[76,54,14,37],[76,55,14,38],[76,66,14,49],[76,68,14,51],[76,84,14,67],[76,85,14,68],[77,6,15,4],[78,6,16,4],[78,19,16,17,"ExpoClipboard"],[78,32,16,30],[78,33,16,30,"default"],[78,40,16,30],[78,41,16,31,"getStringAsync"],[78,55,16,45],[78,56,16,46,"options"],[78,63,16,53],[78,64,16,54],[79,4,17,0],[79,5,17,1],[80,4,17,1],[80,11,17,1,"_getStringAsync"],[80,26,17,1],[80,27,17,1,"apply"],[80,32,17,1],[80,39,17,1,"arguments"],[80,48,17,1],[81,2,17,1],[82,2,17,1],[82,11,26,22,"setStringAsync"],[82,25,26,36,"setStringAsync"],[82,26,26,36,"_x"],[82,28,26,36],[83,4,26,36],[83,11,26,36,"_setStringAsync"],[83,26,26,36],[83,27,26,36,"apply"],[83,32,26,36],[83,39,26,36,"arguments"],[83,48,26,36],[84,2,26,36],[85,2,32,0],[86,0,33,0],[87,0,34,0],[88,0,35,0],[89,0,36,0],[90,0,37,0],[91,0,38,0],[92,2,32,0],[92,11,32,0,"_setStringAsync"],[92,27,32,0],[93,4,32,0,"_setStringAsync"],[93,19,32,0],[93,26,32,0,"_asyncToGenerator"],[93,43,32,0],[93,44,32,0,"default"],[93,51,32,0],[93,53,26,7],[93,64,26,37,"text"],[93,68,26,41],[93,70,26,57],[94,6,26,57],[94,10,26,43,"options"],[94,17,26,50],[94,20,26,50,"arguments"],[94,29,26,50],[94,30,26,50,"length"],[94,36,26,50],[94,44,26,50,"arguments"],[94,53,26,50],[94,61,26,50,"undefined"],[94,70,26,50],[94,73,26,50,"arguments"],[94,82,26,50],[94,88,26,53],[94,89,26,54],[94,90,26,55],[95,6,27,4],[95,10,27,8],[95,11,27,9,"ExpoClipboard"],[95,24,27,22],[95,25,27,22,"default"],[95,32,27,22],[95,33,27,23,"setStringAsync"],[95,47,27,37],[95,49,27,39],[96,8,28,8],[96,14,28,14],[96,18,28,18,"UnavailabilityError"],[96,34,28,37],[96,35,28,37,"UnavailabilityError"],[96,54,28,37],[96,55,28,38],[96,66,28,49],[96,68,28,51],[96,84,28,67],[96,85,28,68],[97,6,29,4],[98,6,30,4],[98,13,30,11,"ExpoClipboard"],[98,26,30,24],[98,27,30,24,"default"],[98,34,30,24],[98,35,30,25,"setStringAsync"],[98,49,30,39],[98,50,30,40,"text"],[98,54,30,44],[98,56,30,46,"options"],[98,63,30,53],[98,64,30,54],[99,4,31,0],[99,5,31,1],[100,4,31,1],[100,11,31,1,"_setStringAsync"],[100,26,31,1],[100,27,31,1,"apply"],[100,32,31,1],[100,39,31,1,"arguments"],[100,48,31,1],[101,2,31,1],[102,2,39,7],[102,11,39,16,"setString"],[102,20,39,25,"setString"],[102,21,39,26,"text"],[102,25,39,30],[102,27,39,32],[103,4,40,4],[103,8,40,8,"Platform"],[103,24,40,16],[103,25,40,16,"Platform"],[103,33,40,16],[103,34,40,17,"OS"],[103,36,40,19],[103,41,40,24],[103,46,40,29],[103,48,40,31],[104,6,41,8],[105,6,42,8],[106,6,43,8],[106,13,43,15,"ExpoClipboard"],[106,26,43,28],[106,27,43,28,"default"],[106,34,43,28],[106,35,43,29,"setString"],[106,44,43,38],[106,45,43,39,"text"],[106,49,43,43],[106,50,43,44],[107,4,44,4],[107,5,44,5],[107,11,45,9],[108,6,46,8,"setStringAsync"],[108,20,46,22],[108,21,46,23,"text"],[108,25,46,27],[108,26,46,28],[109,4,47,4],[110,2,48,0],[111,2,49,0],[112,0,50,0],[113,0,51,0],[114,0,52,0],[115,0,53,0],[116,0,54,0],[117,0,55,0],[118,2,56,7],[118,11,56,16,"hasStringAsync"],[118,25,56,30,"hasStringAsync"],[118,26,56,30],[118,28,56,33],[119,4,57,4],[119,8,57,8],[119,9,57,9,"ExpoClipboard"],[119,22,57,22],[119,23,57,22,"default"],[119,30,57,22],[119,31,57,23,"hasStringAsync"],[119,45,57,37],[119,47,57,39],[120,6,58,8],[120,12,58,14],[120,16,58,18,"UnavailabilityError"],[120,32,58,37],[120,33,58,37,"UnavailabilityError"],[120,52,58,37],[120,53,58,38],[120,64,58,49],[120,66,58,51],[120,82,58,67],[120,83,58,68],[121,4,59,4],[122,4,60,4],[122,11,60,11,"ExpoClipboard"],[122,24,60,24],[122,25,60,24,"default"],[122,32,60,24],[122,33,60,25,"hasStringAsync"],[122,47,60,39],[122,48,60,40],[122,49,60,41],[123,2,61,0],[124,2,62,0],[125,0,63,0],[126,0,64,0],[127,0,65,0],[128,0,66,0],[129,0,67,0],[130,2,62,0],[130,11,68,22,"getUrlAsync"],[130,22,68,33,"getUrlAsync"],[130,23,68,33],[131,4,68,33],[131,11,68,33,"_getUrlAsync"],[131,23,68,33],[131,24,68,33,"apply"],[131,29,68,33],[131,36,68,33,"arguments"],[131,45,68,33],[132,2,68,33],[133,2,74,0],[134,0,75,0],[135,0,76,0],[136,0,77,0],[137,0,78,0],[138,0,79,0],[139,0,80,0],[140,0,81,0],[141,0,82,0],[142,0,83,0],[143,2,74,0],[143,11,74,0,"_getUrlAsync"],[143,24,74,0],[144,4,74,0,"_getUrlAsync"],[144,16,74,0],[144,23,74,0,"_asyncToGenerator"],[144,40,74,0],[144,41,74,0,"default"],[144,48,74,0],[144,50,68,7],[144,63,68,36],[145,6,69,4],[145,10,69,8],[145,11,69,9,"ExpoClipboard"],[145,24,69,22],[145,25,69,22,"default"],[145,32,69,22],[145,33,69,23,"getUrlAsync"],[145,44,69,34],[145,46,69,36],[146,8,70,8],[146,14,70,14],[146,18,70,18,"UnavailabilityError"],[146,34,70,37],[146,35,70,37,"UnavailabilityError"],[146,54,70,37],[146,55,70,38],[146,66,70,49],[146,68,70,51],[146,81,70,64],[146,82,70,65],[147,6,71,4],[148,6,72,4],[148,19,72,17,"ExpoClipboard"],[148,32,72,30],[148,33,72,30,"default"],[148,40,72,30],[148,41,72,31,"getUrlAsync"],[148,52,72,42],[148,53,72,43],[148,54,72,44],[149,4,73,0],[149,5,73,1],[150,4,73,1],[150,11,73,1,"_getUrlAsync"],[150,23,73,1],[150,24,73,1,"apply"],[150,29,73,1],[150,36,73,1,"arguments"],[150,45,73,1],[151,2,73,1],[152,2,73,1],[152,11,84,22,"setUrlAsync"],[152,22,84,33,"setUrlAsync"],[152,23,84,33,"_x2"],[152,26,84,33],[153,4,84,33],[153,11,84,33,"_setUrlAsync"],[153,23,84,33],[153,24,84,33,"apply"],[153,29,84,33],[153,36,84,33,"arguments"],[153,45,84,33],[154,2,84,33],[155,2,90,0],[156,0,91,0],[157,0,92,0],[158,0,93,0],[159,0,94,0],[160,0,95,0],[161,2,90,0],[161,11,90,0,"_setUrlAsync"],[161,24,90,0],[162,4,90,0,"_setUrlAsync"],[162,16,90,0],[162,23,90,0,"_asyncToGenerator"],[162,40,90,0],[162,41,90,0,"default"],[162,48,90,0],[162,50,84,7],[162,61,84,34,"url"],[162,64,84,37],[162,66,84,39],[163,6,85,4],[163,10,85,8],[163,11,85,9,"ExpoClipboard"],[163,24,85,22],[163,25,85,22,"default"],[163,32,85,22],[163,33,85,23,"setUrlAsync"],[163,44,85,34],[163,46,85,36],[164,8,86,8],[164,14,86,14],[164,18,86,18,"UnavailabilityError"],[164,34,86,37],[164,35,86,37,"UnavailabilityError"],[164,54,86,37],[164,55,86,38],[164,66,86,49],[164,68,86,51],[164,81,86,64],[164,82,86,65],[165,6,87,4],[166,6,88,4],[166,13,88,11,"ExpoClipboard"],[166,26,88,24],[166,27,88,24,"default"],[166,34,88,24],[166,35,88,25,"setUrlAsync"],[166,46,88,36],[166,47,88,37,"url"],[166,50,88,40],[166,51,88,41],[167,4,89,0],[167,5,89,1],[168,4,89,1],[168,11,89,1,"_setUrlAsync"],[168,23,89,1],[168,24,89,1,"apply"],[168,29,89,1],[168,36,89,1,"arguments"],[168,45,89,1],[169,2,89,1],[170,2,89,1],[170,11,96,22,"hasUrlAsync"],[170,22,96,33,"hasUrlAsync"],[170,23,96,33],[171,4,96,33],[171,11,96,33,"_hasUrlAsync"],[171,23,96,33],[171,24,96,33,"apply"],[171,29,96,33],[171,36,96,33,"arguments"],[171,45,96,33],[172,2,96,33],[173,2,102,0],[174,0,103,0],[175,0,104,0],[176,0,105,0],[177,0,106,0],[178,0,107,0],[179,0,108,0],[180,0,109,0],[181,0,110,0],[182,0,111,0],[183,0,112,0],[184,0,113,0],[185,0,114,0],[186,0,115,0],[187,0,116,0],[188,0,117,0],[189,0,118,0],[190,2,102,0],[190,11,102,0,"_hasUrlAsync"],[190,24,102,0],[191,4,102,0,"_hasUrlAsync"],[191,16,102,0],[191,23,102,0,"_asyncToGenerator"],[191,40,102,0],[191,41,102,0,"default"],[191,48,102,0],[191,50,96,7],[191,63,96,36],[192,6,97,4],[192,10,97,8],[192,11,97,9,"ExpoClipboard"],[192,24,97,22],[192,25,97,22,"default"],[192,32,97,22],[192,33,97,23,"hasUrlAsync"],[192,44,97,34],[192,46,97,36],[193,8,98,8],[193,14,98,14],[193,18,98,18,"UnavailabilityError"],[193,34,98,37],[193,35,98,37,"UnavailabilityError"],[193,54,98,37],[193,55,98,38],[193,66,98,49],[193,68,98,51],[193,81,98,64],[193,82,98,65],[194,6,99,4],[195,6,100,4],[195,19,100,17,"ExpoClipboard"],[195,32,100,30],[195,33,100,30,"default"],[195,40,100,30],[195,41,100,31,"hasUrlAsync"],[195,52,100,42],[195,53,100,43],[195,54,100,44],[196,4,101,0],[196,5,101,1],[197,4,101,1],[197,11,101,1,"_hasUrlAsync"],[197,23,101,1],[197,24,101,1,"apply"],[197,29,101,1],[197,36,101,1,"arguments"],[197,45,101,1],[198,2,101,1],[199,2,101,1],[199,11,119,22,"getImageAsync"],[199,24,119,35,"getImageAsync"],[199,25,119,35,"_x3"],[199,28,119,35],[200,4,119,35],[200,11,119,35,"_getImageAsync"],[200,25,119,35],[200,26,119,35,"apply"],[200,31,119,35],[200,38,119,35,"arguments"],[200,47,119,35],[201,2,119,35],[202,2,125,0],[203,0,126,0],[204,0,127,0],[205,0,128,0],[206,0,129,0],[207,0,130,0],[208,0,131,0],[209,0,132,0],[210,0,133,0],[211,0,134,0],[212,0,135,0],[213,0,136,0],[214,0,137,0],[215,0,138,0],[216,2,125,0],[216,11,125,0,"_getImageAsync"],[216,26,125,0],[217,4,125,0,"_getImageAsync"],[217,18,125,0],[217,25,125,0,"_asyncToGenerator"],[217,42,125,0],[217,43,125,0,"default"],[217,50,125,0],[217,52,119,7],[217,63,119,36,"options"],[217,70,119,43],[217,72,119,45],[218,6,120,4],[218,10,120,8],[218,11,120,9,"ExpoClipboard"],[218,24,120,22],[218,25,120,22,"default"],[218,32,120,22],[218,33,120,23,"getImageAsync"],[218,46,120,36],[218,48,120,38],[219,8,121,8],[219,14,121,14],[219,18,121,18,"UnavailabilityError"],[219,34,121,37],[219,35,121,37,"UnavailabilityError"],[219,54,121,37],[219,55,121,38],[219,66,121,49],[219,68,121,51],[219,83,121,66],[219,84,121,67],[220,6,122,4],[221,6,123,4],[221,19,123,17,"ExpoClipboard"],[221,32,123,30],[221,33,123,30,"default"],[221,40,123,30],[221,41,123,31,"getImageAsync"],[221,54,123,44],[221,55,123,45,"options"],[221,62,123,52],[221,63,123,53],[222,4,124,0],[222,5,124,1],[223,4,124,1],[223,11,124,1,"_getImageAsync"],[223,25,124,1],[223,26,124,1,"apply"],[223,31,124,1],[223,38,124,1,"arguments"],[223,47,124,1],[224,2,124,1],[225,2,124,1],[225,11,139,22,"setImageAsync"],[225,24,139,35,"setImageAsync"],[225,25,139,35,"_x4"],[225,28,139,35],[226,4,139,35],[226,11,139,35,"_setImageAsync"],[226,25,139,35],[226,26,139,35,"apply"],[226,31,139,35],[226,38,139,35,"arguments"],[226,47,139,35],[227,2,139,35],[228,2,145,0],[229,0,146,0],[230,0,147,0],[231,0,148,0],[232,0,149,0],[233,0,150,0],[234,0,151,0],[235,2,145,0],[235,11,145,0,"_setImageAsync"],[235,26,145,0],[236,4,145,0,"_setImageAsync"],[236,18,145,0],[236,25,145,0,"_asyncToGenerator"],[236,42,145,0],[236,43,145,0,"default"],[236,50,145,0],[236,52,139,7],[236,63,139,36,"base64Image"],[236,74,139,47],[236,76,139,49],[237,6,140,4],[237,10,140,8],[237,11,140,9,"ExpoClipboard"],[237,24,140,22],[237,25,140,22,"default"],[237,32,140,22],[237,33,140,23,"setImageAsync"],[237,46,140,36],[237,48,140,38],[238,8,141,8],[238,14,141,14],[238,18,141,18,"UnavailabilityError"],[238,34,141,37],[238,35,141,37,"UnavailabilityError"],[238,54,141,37],[238,55,141,38],[238,66,141,49],[238,68,141,51],[238,83,141,66],[238,84,141,67],[239,6,142,4],[240,6,143,4],[240,13,143,11,"ExpoClipboard"],[240,26,143,24],[240,27,143,24,"default"],[240,34,143,24],[240,35,143,25,"setImageAsync"],[240,48,143,38],[240,49,143,39,"base64Image"],[240,60,143,50],[240,61,143,51],[241,4,144,0],[241,5,144,1],[242,4,144,1],[242,11,144,1,"_setImageAsync"],[242,25,144,1],[242,26,144,1,"apply"],[242,31,144,1],[242,38,144,1,"arguments"],[242,47,144,1],[243,2,144,1],[244,2,144,1],[244,11,152,22,"hasImageAsync"],[244,24,152,35,"hasImageAsync"],[244,25,152,35],[245,4,152,35],[245,11,152,35,"_hasImageAsync"],[245,25,152,35],[245,26,152,35,"apply"],[245,31,152,35],[245,38,152,35,"arguments"],[245,47,152,35],[246,2,152,35],[247,2,158,0],[248,0,159,0],[249,0,160,0],[250,0,161,0],[251,0,162,0],[252,0,163,0],[253,0,164,0],[254,0,165,0],[255,0,166,0],[256,0,167,0],[257,0,168,0],[258,0,169,0],[259,0,170,0],[260,0,171,0],[261,0,172,0],[262,0,173,0],[263,0,174,0],[264,0,175,0],[265,0,176,0],[266,0,177,0],[267,2,158,0],[267,11,158,0,"_hasImageAsync"],[267,26,158,0],[268,4,158,0,"_hasImageAsync"],[268,18,158,0],[268,25,158,0,"_asyncToGenerator"],[268,42,158,0],[268,43,158,0,"default"],[268,50,158,0],[268,52,152,7],[268,65,152,38],[269,6,153,4],[269,10,153,8],[269,11,153,9,"ExpoClipboard"],[269,24,153,22],[269,25,153,22,"default"],[269,32,153,22],[269,33,153,23,"hasImageAsync"],[269,46,153,36],[269,48,153,38],[270,8,154,8],[270,14,154,14],[270,18,154,18,"UnavailabilityError"],[270,34,154,37],[270,35,154,37,"UnavailabilityError"],[270,54,154,37],[270,55,154,38],[270,66,154,49],[270,68,154,51],[270,83,154,66],[270,84,154,67],[271,6,155,4],[272,6,156,4],[272,13,156,11,"ExpoClipboard"],[272,26,156,24],[272,27,156,24,"default"],[272,34,156,24],[272,35,156,25,"hasImageAsync"],[272,48,156,38],[272,49,156,39],[272,50,156,40],[273,4,157,0],[273,5,157,1],[274,4,157,1],[274,11,157,1,"_hasImageAsync"],[274,25,157,1],[274,26,157,1,"apply"],[274,31,157,1],[274,38,157,1,"arguments"],[274,47,157,1],[275,2,157,1],[276,2,178,7],[276,11,178,16,"addClipboardListener"],[276,31,178,36,"addClipboardListener"],[276,32,178,37,"listener"],[276,40,178,45],[276,42,178,47],[277,4,179,4],[278,4,180,4],[278,8,180,10,"listenerWrapper"],[278,23,180,25],[278,26,180,29,"event"],[278,31,180,34],[278,35,180,39],[279,6,181,8],[279,10,181,14,"wrappedEvent"],[279,22,181,26],[279,25,181,29],[280,8,182,12],[280,11,182,15,"event"],[280,16,182,20],[281,8,183,12],[281,12,183,16,"content"],[281,19,183,23,"content"],[281,20,183,23],[281,22,183,26],[282,10,184,16,"console"],[282,17,184,23],[282,18,184,24,"warn"],[282,22,184,28],[282,23,184,29],[282,141,184,147],[282,142,184,148],[283,10,185,16],[283,17,185,23],[283,19,185,25],[284,8,186,12],[285,6,187,8],[285,7,187,9],[286,6,188,8,"listener"],[286,14,188,16],[286,15,188,17,"wrappedEvent"],[286,27,188,29],[286,28,188,30],[287,4,189,4],[287,5,189,5],[288,4,190,4],[288,11,190,11,"ExpoClipboard"],[288,24,190,24],[288,25,190,24,"default"],[288,32,190,24],[288,33,190,25,"addListener"],[288,44,190,36],[288,45,190,37,"onClipboardEventName"],[288,65,190,57],[288,67,190,59,"listenerWrapper"],[288,82,190,74],[288,83,190,75],[289,2,191,0],[290,2,192,0],[291,0,193,0],[292,0,194,0],[293,0,195,0],[294,0,196,0],[295,0,197,0],[296,0,198,0],[297,0,199,0],[298,0,200,0],[299,0,201,0],[300,0,202,0],[301,0,203,0],[302,0,204,0],[303,2,205,7],[303,11,205,16,"removeClipboardListener"],[303,34,205,39,"removeClipboardListener"],[303,35,205,40,"subscription"],[303,47,205,52],[303,49,205,54],[304,4,206,4,"subscription"],[304,16,206,16],[304,17,206,17,"remove"],[304,23,206,23],[304,24,206,24],[304,25,206,25],[305,2,207,0],[306,2,208,0],[307,0,209,0],[308,0,210,0],[309,0,211,0],[310,0,212,0],[311,0,213,0],[312,0,214,0],[313,2,215,7],[313,6,215,13,"isPasteButtonAvailable"],[313,28,215,35],[313,31,215,38,"Platform"],[313,47,215,46],[313,48,215,46,"Platform"],[313,56,215,46],[313,57,215,47,"OS"],[313,59,215,49],[313,64,215,54],[313,69,215,59],[313,72,215,62,"ExpoClipboard"],[313,85,215,75],[313,86,215,75,"default"],[313,93,215,75],[313,94,215,76,"isPasteButtonAvailable"],[313,116,215,98],[313,119,215,101],[313,124,215,106],[314,0,215,107],[314,3]],"functionMap":{"names":["<global>","getStringAsync","setStringAsync","setString","hasStringAsync","getUrlAsync","setUrlAsync","hasUrlAsync","getImageAsync","setImageAsync","hasImageAsync","addClipboardListener","listenerWrapper","wrappedEvent.get__content","removeClipboardListener"],"mappings":"AAA;OCW;CDK;OES;CFK;OGQ;CHS;OIQ;CJK;OKO;CLK;OMW;CNK;OOO;CPK;OQkB;CRK;OSe;CTK;OUQ;CVK;OWqB;4BCE;YCG;aDG;KDG;CXE;Occ;CdE"},"hasCjsExports":false},"type":"js/module"}]}